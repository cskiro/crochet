#!/usr/bin/env node
import { mkdir, writeFile } from 'node:fs/promises';
import { resolve, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';
import { compileFromFile } from 'json-schema-to-typescript';

const __dirname = dirname(fileURLToPath(import.meta.url));
const schemasDir = resolve(__dirname, '..', 'packages', 'schemas');
const typesDir = resolve(schemasDir, 'types');

const targets = [
  {
    schema: 'accessibility-gaps.schema.json',
    output: 'accessibility-gaps.d.ts'
  },
  {
    schema: 'contrast-validation.schema.json',
    output: 'contrast-validation.d.ts'
  }
];

await mkdir(typesDir, { recursive: true });

for (const target of targets) {
  const schemaPath = resolve(schemasDir, target.schema);
  const declaration = await compileFromFile(schemaPath, {
    bannerComment: ''
  });

  const outputPath = resolve(typesDir, target.output);
  await writeFile(outputPath, declaration, 'utf8');
}

const indexContent = `// Auto-generated by scripts/generate-schema-types.mjs\n${targets
  .map(({ output }) => `export * from './${output.replace('.d.ts', '')}';`)
  .join('\n')}\n`;
await writeFile(resolve(typesDir, 'index.d.ts'), indexContent, 'utf8');
